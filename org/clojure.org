#+HUGO_SECTION: zettels
#+SETUPFILE:./hugo_setup.org
#+TITLE: Clojure

libraries:

- https://github.com/clojure/test.generative
- https://github.com/clojure/data.generators
- https://github.com/clojure/test.check

- cheatsheet :: https://clojure.org/api/cheatsheet

* declare private symbol for a namespace
#+BEGIN_SRC clojure
(defonce ^:private abc)
#+END_SRC
* pos?
~pos?~ is a handy and commonly used predicate for determining whether a number
is above zero. [fn:1]
* Ratio type
* floating-point number
floating-point numbers are "contagious" in Clojure. Any operation involving
floating-point numbers will result in a float or a double. [fn:1]
* it has no unless
instead it's ~when-not~
* comparison
Clojure's comparison functions can accept more than two arguments.

#+BEGIN_SRC clojure
(>= next-to-last the-last elevation)
#+END_SRC

will return true if next-to-last is greater than or equal to the-last , and if
the-last is greater than or equal to elevation. [fn:1]

* equality
sequences of different types can be considered equal [fn:1]
#+BEGIN_SRC clojure
(= '(1 2 3) [1 2 3])
;; true
#+END_SRC

~=~ function can also take one argument, in which case it will always return true [fn:1]
#+BEGIN_SRC clojure
(= 1)
;; true
#+END_SRC

* function composition
pure function is referentially transparent
** comp
 for creating a new function from the composition of any number of functions.

using comp on the functions f1, f2, ... fn, creates a new function g such that g(x1, x2, ... xn) equals f1(f2(fn(x1, x2, ... xn))).

order is from right to left.
#+BEGIN_SRC clojure
((comp inc *) 2 3)
; => 7
#+END_SRC

** memoize
remembers the result of a particular function call

* atom
Clojure’s atom reference type allows you to endow a succession of related values
with an identity.

To get an atom’s current state, you dereference it. Here’s Fred’s current
state:@fred

dereferencing an atom (or any other reference type) will never block

To update the atom so that it refers to a new state, you use swap!

swap! receives an atom and a function as arguments. It applies the function to
the atom’s current state to produce a new value, and then it updates the atom to
refer to this new value. The new value is also returned.

By using atoms, you can retain past state

 update an atom without checking its current value, use ~reset!~

* watch
A watch is a function that takes four arguments: a key, the reference being
watched, its previous state, and its new state.

To attach watch function to a ref, using ~add-watch~ The general form of add-watch is (add-watch ref key watch-fn).

* Validators
Validators let you specify what states are allowable for a reference

 validator takes only one argument. When you add a validator to a reference, the
 reference is modified so that, whenever it’s updated, it will call this
 validator with the value returned from the update function as its argument. If
 the validator fails by returning false or throwing an exception, the reference
 won’t change to point to the new value

attach a validator during atom creation
#+BEGIN_SRC clojure
(def bobby  
  (atom {:cuddle-hunger-level 0 :percent-deteriorated 0}
        :validator percent-deteriorated-validator))

(swap! bobby update-in [:percent-deteriorated] + 200)
#+END_SRC

* Refs
Atoms are ideal for managing the state of independent identities. Sometimes,
though, we need to express that an event should update the state of more than
one identity simultaneously. Refs are the perfect tool for this scenario.

Refs allow you to update the state of multiple identities using transaction
semantics

* Vars
dynamic var
#+BEGIN_SRC clojure
(def ^:dynamic *notification-address* "dobby@elf.org")
#+END_SRC

temporarily change the value of dynamic vars by using binding
#+BEGIN_SRC clojure
(binding [*notification-address* "test@elf.org"]  *notification-address*)
; => "test@elf.org"
#+END_SRC

Dynamic vars are most often used to name a resource that one or more functions target.

Clojure comes with a ton of built-in dynamic vars for this purpose. *out*, for
example, represents the standard output for print operations.

Dynamic vars are a great way to specify a common resource while retaining the
flexibility to change it on an ad hoc basis.

Dynamic vars are also used for configuration. For example, the builtin var
*print-length* allows you to specify how many items in a collection Clojure
should print:

#+BEGIN_SRC clojure
(binding [*print-length* 1]  (println ["Print" "just" "one!"]))
; => [Print ...]
#+END_SRC

it’s possible to set! dynamic vars that have been bound

* Var root
When you create a new var, the initial value that you supply is its root:
#+BEGIN_SRC clojure
(def power-source "hair")
#+END_SRC

Clojure lets you permanently change this root value with the function ~alter-var-root~

You can also temporarily alter a var’s root with ~with-redefs~

* Function Literals
An anonymous function is a function without a name. In Clojure these can be
defined in two ways, fn and the literal #(…​). Creating a function with defn
immediately binds it to a name, fn just creates a function.

The function literal supports multiple arguments via %, %n, and %&.
#+BEGIN_SRC clojure
#(println %1 %2 %3)
#+END_SRC

* namespaced keyword
:click-handler and ::click-handler. The first one merely references a keyword, whereas the one with two colons implicitly includes the full namespace where it was created.

If your current namespace is relevance.core, for example, then using the later keyword would be equivalent to :relevance.core/click-handler.

[fn:1] The Clojure workshop
