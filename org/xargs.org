#+HUGO_SECTION: zettels
#+SETUPFILE:./hugo_setup.org
#+TITLE: xargs

* Run Multiple Commands
use ~-I~ option to define a ~replace-str~ after the -I option and all occurrences
of the replace-str are replaced with the argument passed to xargs. [[https://linuxize.com/post/linux-xargs-command/][source]]

#+BEGIN_SRC sh
echo "file1 file2 file3" | xargs -t -I % sh -c '{ touch %; ls -l %; }'
#+END_SRC


another:

cat a.txt | xargs -d $'\n' sh -c 'for arg do command1 "$arg"; command2 "$arg"; ...; done' _

https://stackoverflow.com/questions/6958689/running-multiple-commands-with-xargs

The use of "$arg" instead of % (and the absence of -I in the xargs command line) is for security reasons: Passing data on sh's command-line argument list instead of substituting it into code prevents content that data might contain (such as $(rm -rf ~), to take a particularly malicious example) from being executed as code.

Similarly, the use of -d $'\n' is a GNU extension which causes xargs to treat each line of the input file as a separate data item. Either this or -0 (which expects NULs instead of newlines) is necessary to prevent xargs from trying to apply shell-like (but not quite shell-compatible) parsing to the stream it reads. (If you don't have GNU xargs, you can use tr '\n' '\0' <a.txt | xargs -0 ... to get line-oriented reading without -d).

The _ is a placeholder for $0, such that other data values added by xargs become $1 and onward, which happens to be the default set of values a for loop iterates over.
