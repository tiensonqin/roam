#+HUGO_SECTION: zettels
#+SETUPFILE:./hugo_setup.org
#+TITLE: Living Clojure
#+DATE: 2020-05-29

- tags :: [[file:clojure.org][Clojure]]

* atom
Atoms are designed to store the state of something that is independent, meaning
we can change the value of itindependently of changing any other state.

** dereference
to see the value of the atom at this moment, we need todereference it with a preceding @:

** change the value of atom
The first is using reset!. This simply replaces the old value with the new value
and returns the new value.

The swap! form applies a function on the old value of the atom and sets it to the new value.

* underscore
A convention for naming a parameter you are not using is to use an underscore.

* future
One way is touse the future form.  The future form takes a body and executes it in another thread

#+BEGIN_SRC clojure
(def counter (atom 0))
@counter;; -> 0
(let [n 5]
  (future (dotimes [_ n] (swap! counter inc)))
  (future (dotimes [_ n] (swap! counter inc)))
  (future (dotimes [_ n] (swap! counter inc))))
#+END_SRC

* Refs
Using Refs for Coordinated Changes

** dereference
precede ref with @

** alter
alter form, which takes a ref and a function to apply to the current value (very similar to swap! with atoms):

** dosync
We need to run this in a transaction.  We do this by using a dosync form

** commute
difference between commute and alter:

commute will not retry during the transaction. Instead, it will use an
in-transaction-value in the meantime, finally setting the ref value at the
commit point in the transaction.

* agents
agents are used for independent and asynchronous changes

#+BEGIN_SRC clojure
(def who-agent (agent :caterpillar))
#+END_SRC

** dereference
precede agent with @

** send
We can change the state of an agent by using send.  The send form takes a function to send to the agent.

The send dispatches the action to the agent, which gets processed by a thread in
the thread pool. The agent will only process one action at a time

the actions will be also processed in the same order that they were dispatched,
if they were dispatched from the same thread. Unlike swap! and alter, send
returns immediately.
** send-off
 send-off form is the same as the send form; the difference is that
 send-offshould be used for potentially I/O-blocking actions. Using send uses a
 fixed thread pool, which is good for CPU-bound operations, whereas send-off
 uses an expandablethread pool necessary to avoid an I/O-bound thread pool from
 blocking:

** error
The agent’s errors can also be inspected with agent-errors:
#+BEGIN_SRC clojure
(agent-errors who-agent)
;; -> (#<Exception java.lang.Exception: Boom!>)
#+END_SRC

The agent will stay in this failed state until the agent is restarted with
restart-agent, which clears its errors andresets the state of the agent:

* overview
| type  | communication | coordination  |
|-------+---------------+---------------|
| Atom  | Synchronous   | uncoordinated |
| Ref   | Synchronous   | coordinated   |
| Agent | Asynchronous  | uncoordinated |

* Java interop
A String in Java is an instance of java.lang.String.  A string in Clojure is the exact same thing.

#+BEGIN_SRC clojure
(class "caterpillar")
;; -> java.lang.String
#+END_SRC

We do this in Clojure by using a dot followed by the object and the object’s method that we wish to invoke:
#+BEGIN_SRC clojure
(. "caterpillar" toUpperCase)
;; -> "CATERPILLAR"
#+END_SRC

a shorthand dot prefix way to do the same thing by usinga ~dot followed by the object’s method~ that we wish to invoke:
#+BEGIN_SRC clojure
(.toUpperCase "caterpillar")
;; -> "CATERPILLAR"
#+END_SRC

If the Java method takes arguments, they are included after the object
#+BEGIN_SRC clojure
(.indexOf "caterpillar" "pillar")
#+END_SRC

** create instances
We can create instances of Java objects with ~new~:
#+BEGIN_SRC clojure
(new String "Hi!!")
;; -> "Hi!!"
#+END_SRC

Another way to  is to use a shorthand form by using a dot right after the class name:
#+BEGIN_SRC clojure
(String. "Hi!!")
;; -> "Hi!!"
#+END_SRC

** import Java class
using ~:import~ in the namespace with the package name and the class that we
wish to import:
#+BEGIN_SRC clojure
(ns caterpillar.network
  (:import (java.net InetAddress)))
#+END_SRC

without importing we need to use the fully qualified names:
#+BEGIN_SRC clojure
(java.net.InetAddress/getByName "localhost")
;; -> #<Inet4Address localhost/127.0.0.1>
#+END_SRC

** static method
To execute static methods on Java classes from Clojure, we use a ~forward slash~:
#+BEGIN_SRC clojure
(InetAddress/getByName "localhost")
;; -> #<Inet4Address localhost/127.0.0.1>
#+END_SRC

** doto macro
allows us to take a Java object and then act on it in succession with a list of
operations

#+BEGIN_SRC clojure
(def sb (doto (StringBuffer. "Who ")
          (.append "are ")
          (.append "you?")))

(.toString sb)
;; -> "Who are you?"
#+END_SRC

** UUID generation
#+BEGIN_SRC clojure
(import 'java.util.UUID)
(UUID/randomUUID)
#+END_SRC

* Polymorphism
** multimethods

#+begin_example
(defmulti name function)
#+end_example

#+BEGIN_SRC clojure
(defmulti who-are-you class)
#+END_SRC

* project
Always use underscores for directories and filenames, and use dashes for namespaces.

#+BEGIN_SRC clojure
(deftest a-test
  (testing "FIXME, I fail."
    (is (= 0 1))))
#+END_SRC

- deftest defines a test function.
- testing is used within deftest to provide a context to what is being tested.

run test: lein test

[org.clojure/clojure "1.6.0"]
- org.clojure is the group id
- clojure is the artifact id
- 1.6.0 is the version

- https://clojars.org/
- https://search.maven.org/
 
it can also be configured to look at additional repositories (public and
private), by using the :repositories key in the configuration file.

By default, it stores them in your maven home directory. It looks something like
this on a Mac/Linux system:-> ls
~/.m2/repository/org/clojure/clojure/1.6.0/_maven.repositories clojure-1.6.0.jar
clojure-1.6.0.jar.sha1clojure-1.6.0.pom clojure-1.6.0.pom.sha1

~lein deps :tree~. It will show you a tree structure of the exact libraries
andversions that your project is using—after all the dependencies have been
resolved.

* web
#+BEGIN_SRC sh :dir ~/project
lein new compojure cheshire-cat
#+END_SRC

#+RESULTS:

start web server:
#+BEGIN_SRC sh
lein ring server
#+END_SRC

~defroutes~ is used to create a sequence of HTTP routes called app-routes.  These are the request paths that the web application will handle.

The Ring-JSON library does just this.  It will automatically convert any response with a Clojure collection as a body into JSON for you, and it uses Cheshire to do it.


[ring/ring-json "0.5.0"]

[ring.middleware.json :as ring-json]
[ring.util.response :as rr]

#+BEGIN_SRC clojure
(GET "/cheshire-cat" []
     (rr/response {:name "Cheshire Cat" :status :grinning}))
#+END_SRC

#+BEGIN_SRC clojure
(def app
  (-> app-routes
      (ring-json/wrap-json-response)
      (wrap-defaults site-defaults)))
#+END_SRC

** clojurescript
#+BEGIN_SRC clojure
[org.clojure/clojurescript "0.0-2371"]
#+END_SRC

The lein-cljsbuild plug-in allows you to autocompile your ClojureScript code
while you are working on it, and it also provides a nice ClojureScript REPL as
well.

Go ahead and add a dependency for this as well in your :plugins section:
#+BEGIN_SRC clojure
:plugins [[lein-ring "0.8.12"]
          [lein-cljsbuild "1.0.3"]]
#+END_SRC

#+BEGIN_SRC clojure
:cljsbuild {    :builds [{        :source-paths ["src-cljs"]          :compiler {          :output-to "resources/public/main.js"           :optimizations :whitespace            :pretty-print true}}]} 
#+END_SRC

#+BEGIN_SRC sh
lein trampoline cljsbuild repl-rhino
#+END_SRC

This will use Rhino JavaScript to evaluate the end result from the ClojureScript that you enter as input.  It is the simplest ClojureScript REPL to get up and running.

interop with JavaScript functions by using a ~js/~ prefix.  For example, we can look at the JavaScript Date function:js/Date;; -> #<function Date() { [native code for Date.Date, arity=1] }

** difference
These are the major differences to take note of:ClojureScript has JavaScript
interop rather than Java.Although there are atoms, there are no agents or
refs.In ClojureScript, only integer and floating-point numbers are supported.Of
course, ClojureScript compiles to JavaScript.
