#+HUGO_SECTION: zettels
#+SETUPFILE:./hugo_setup.org
#+TITLE: reagent React Interop
#+DATE: 2020-06-06

- source :: https://cljdoc.org/d/reagent/reagent/0.10.0/doc/tutorials/interop-with-react

* Creating Reagent "Components" from React Components
The function reagent/adapt-react-class will turn a React Component into
something that can be placed into the first position of a Hiccup form, as if it
were a Reagent function. Take, for example the react-flip-move library and
assume that it has been properly imported as a React Component called FlipMove.
By wrapping FlipMove with ~adapt-react-class~, we can use it in a Hiccup form:

#+BEGIN_SRC clojure
(defn top-articles [articles]
  [(reagent/adapt-react-class FlipMove)
   {:duration 750
    :easing "ease-out"}
   articles]
#+END_SRC

There is also a convenience mechanism ~:>~ (colon greater-than) that shortens
this and avoid some parenthesis:

#+BEGIN_SRC clojure
(defn top-articles [articles]
  [:> FlipMove
   {:duration 750
    :easing "ease-out"}
   articles]
#+END_SRC

This is the equivalent JavaScript:

#+BEGIN_SRC javascript
const TopArticles = ({ articles }) => (
  <FlipMove duration={750} easing="ease-out">
    {articles}
  </FlipMove>
);
#+END_SRC

* example
#+BEGIN_SRC clojure

(defn BasicTable []
  [:> DataTable  #js{:title "Movie list"
                 :columns my-cols
                 :data my-data}])
#+END_SRC

There are no records to display

#+BEGIN_SRC clojure
(defn BasicTable []
  [:> DataTable  (cljs->js {:title "Movie list"
                 :columns my-cols
                 :data my-data})])
#+END_SRC
this raised bunch of errors

turned out there is no ~cljs->js~, it's ~clj->js~

#+BEGIN_SRC clojure
(defn BasicTable []
  [:> DataTable  {:title "Movie list"
                 :columns my-cols
                 :data my-data}])
#+END_SRC
this alos raises bunch of errors


#+begin_example
Objects are not valid as a React child (found: object with keys {ns, name, fqn, _hash, cljs$lang$protocol_mask$partition0$, cljs$lang$protocol_mask$partition1$}). If you meant to render a collection of children, use an array instead.
#+end_example

so the issue is this:
#+BEGIN_SRC clojure
:cell (fn [row] (CustomTitle row))}
#+END_SRC

once I get rid of this key, it starts to show something

* how to translate this
#+BEGIN_SRC javascript
class MyComponent extends Component {
  render() {
      return (
        <DataTable
          title="Arnold Movies"
          columns={columns}
          data={data}
          selectableRows // add for checkbox selection
          Clicked
          Selected={handleChange}
        />
    )
  }
};
#+END_SRC

don't know how to pass ~selectableRows~ ..
