#+HUGO_SECTION: zettels
#+SETUPFILE:./hugo_setup.org
#+TITLE: Paint House

Leetcode 256

* One Solution
- source :: https://mp.weixin.qq.com/s/RPBRysbX7wgW_vnPNqloYA
** 问题拆解
对于每个房子来说，都可以使用三种油漆当中的一种，如果说不需要保证相邻的房子的颜色
必须不同，那么整个题目会变得非常简单，每个房子直接用最便宜的油漆刷就好了，但是加
上这个限制条件，你会发现刷第 i 个房子的花费其实是和前面 i - 1 个房子的花费以及选
择相关，如果说我们需要知道第 i 个房子使用第 k 种油漆的最小花费，那么你其实可以思
考第 i - 1 个房子如果不用该油漆的最小花费，这个最小花费是考虑从 0 到当前位置所有
的房子的。

** 状态定义
通过之前的问题拆解步骤，状态可以定义成 dp[i][k]，表示如果第 i 个房子选择第 k 个
颜色，那么从 0 到 i 个房子的最小花费

** 递推方程
基于之前的状态定义，以及相邻的房子不能使用相同的油漆，那么递推方程可以表示成
#+BEGIN_SRC java
dp[i][k] = Math.min(dp[i - 1][l], ..., dp[i - 1][r]) + costs[i][k]， l != k, r != k
#+END_SRC

** 实现
因为我们要考虑 i - 1 的情况，但是第 0 个房子并不存在 i - 1 的情况，因此我们可以
把第 0 个房子的最小花费存在状态数组中，当然你也可以多开一格 dp 状态，其实都是一
样的。

** code
#+BEGIN_SRC java
public int minCost(int[][] costs) {
    if (costs == null || costs.length == 0) {
        return 0;
    }
    int n = costs.length;

    int[][] dp = new int[n][3];

    for (int i = 0; i < costs[0].length; ++i) {
        dp[0][i] = costs[0][i];
    }

    for (int i = 1; i < n; ++i) {
        dp[i][0] = Math.min(dp[i - 1][1], dp[i - 1][2]) + costs[i][0];
        dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][2]) + costs[i][1];
        dp[i][2] = Math.min(dp[i - 1][0], dp[i - 1][1]) + costs[i][2];
    }

    return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));
}
#+END_SRC
