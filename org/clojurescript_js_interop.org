#+TITLE: ClojureScript JS Interop
#+DATE: 2020-06-06

- tags :: [[file:clojurescript.org][ClojureScript]] [[file:javascript.org][JavaScript]]

- an helpful library :: https://github.com/applied-science/js-interop
- to read :: http://lukevanderhart.com/2011/09/30/using-javascript-and-clojurescript.html
- to watch :: https://lambdaisland.com/episodes/clojurescript-interop
 
* global scope [fn:1]
ClojureScript defines special ~js~ namespace to allow accessing JavaScript
types/functions/methods/objects defined in global scope (i.e. window object for
browser).

* Invoking methods [fn:1] [fn:2]
To invoke a JavaScript method we need to prefix the name of the method with the . (dot):

#+BEGIN_SRC clojure
(.hello js/window)
;; JS output: window.hello();
#+END_SRC
which is a syntactic sugar of:

#+BEGIN_SRC clojure
(. js/window (hello))
#+END_SRC

* Property access
The interface from ClojureScript to JavaScript is called the "dot special form". It works as both a property accessor and a means to invoke functions.

Get the title property on the document. Note the -{property} syntax, where a property must be preceded by a hyphen.

#+BEGIN_SRC clojure
(. js/document -title)
#+END_SRC

* Function invocation
The dot form also enables function invocation.

(. js/document hasFocus)
document.hasFocus()

* Setters
The set! function provides a means to set native javascript object properties.

(set! (.. js/window -location -search) "foo=bar")

[fn:1] https://www.spacjer.com/blog/2014/09/12/clojurescript-javascript-interop/
[fn:2] https://www.verypossible.com/blog/clojurescript-and-javascript-interoperability-a-comprehensive-guide
